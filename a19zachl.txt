import java.lang.*; 

   
class ffff { 
     
    static final int num_Vertices = 9; 
    
    int minDistance(int path_array[], Boolean sptSet[])   { 
        int min = Integer.MAX_VALUE, min_index = -1; 
        for (int v = 0; v < num_Vertices; v++) 
            if (sptSet[v] == false && path_array[v] <= min) { 
                min = path_array[v]; 
                min_index = v; 
            } 
   
        return min_index; 
    } 
   
   
    void printMinpath(int path_array[])   { 
        System.out.println("Vertex# \t Minimum Distance from Source"); 
        for (int i = 0; i < num_Vertices; i++) 
            System.out.println(i + " \t\t\t " + path_array[i]); 
    }
    

    void algo_dijkstra(int graph[][], int src_node)  { 
        int path_array[] = new int[num_Vertices];
      
        Boolean sptSet[] = new Boolean[num_Vertices]; 
   
       
        for (int i = 0; i < num_Vertices; i++) { 
            path_array[i] = Integer.MAX_VALUE; 
            sptSet[i] = false; 
        } 
   
      
        path_array[src_node] = 0; 
  
        for (int count = 0; count < num_Vertices - 1; count++) { 
         
            int u = minDistance(path_array, sptSet); 
             
            sptSet[u] = true; 
             
            for (int v = 0; v < num_Vertices; v++) 
   
             
                if (!sptSet[v] && graph[u][v] != 0 && path_array[u] != 
                            Integer.MAX_VALUE && path_array[u] 
                            + graph[u][v] < path_array[v]) 
                            path_array[v] = path_array[u] + graph[u][v]; 
        } 
   
        
        printMinpath(path_array); 
    } 
}
class ffffd{
    public static void main(String[] args) 
    { 
        
        int graph[][] = new int[][] {
            {0,300,402,356,0,0,0,0,0},
            {300,0,0,0,440,474,0,0,0},
            {402,0,0,0,0,330,0,0,0},
            {356,0,0,0,0,0,823,0,0},
            {0,440,0,0,0,0,0,430,0},
            {0,474,330,0,0,0,813,365,774},
            {0,0,0,823,0,813,0,0,403},
            {0,0,0,0,430,365,0,0,768},
            {0,0,0,0,0,774,403,768,0}};
        ffff g = new ffff(); 
        g.algo_dijkstra(graph, 0); 
    } 
}